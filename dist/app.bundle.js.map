{"version":3,"sources":["webpack:///webpack/bootstrap 5bdd9cce3bd075892779","webpack:///./src/scripts/importMesh.js","webpack:///./src/scripts/room.js","webpack:///./src/scripts/scene.js","webpack:///external \"BABYLON\"","webpack:///./src/scripts/app.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;AC3EA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mFAAmF,uBAAuB,EAAE;AAC5G;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,gCAAgC;AAChC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,E;;;;;;ACtHA,yB;;;;;;;;;;;;;ACAA;AACsB;AACP;AACM;;AAErB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA,CAAC;;AAED,mB","file":"app.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5bdd9cce3bd075892779","export function importMesh(name, scene, config) {\n    BABYLON.SceneLoader.ImportMesh(\n        name,\n        config.path,\n        config.fileName,\n        scene,\n        function (meshes) {\n            const mesh = meshes[0];\n            const bbox = mesh.getBoundingInfo().boundingBox;\n\n            mesh.material = new BABYLON.StandardMaterial(\"Material.\" + name, scene);\n            mesh.position = new BABYLON.Vector3(\n                config.position.x || 0,\n                config.position.y || .005,\n                config.position.z || 0\n            );\n            mesh.checkCollisions = true;\n            mesh.applyGravity = true;\n            mesh.ellipsoid = new BABYLON.Vector3(\n                (bbox.maximum.x - bbox.minimum.x) * mesh.scaling.x * .5,\n                .01,\n                (bbox.maximum.z - bbox.minimum.z) * mesh.scaling.z * .5\n            );\n\n            config.shadowGenerator.getShadowMap().renderList.push(mesh);\n        }\n    );\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/importMesh.js\n// module id = 0\n// module chunks = 0","export class Room {\n    constructor(options, scene) {\n        this.size = {\n            width: options.width,\n            height: options.height,\n            depth: options.depth\n        }\n\n        this.scene = scene;\n\n        this.roomLight = new BABYLON.PointLight(\"roomLight\", new BABYLON.Vector3(0, 2.5, 0), scene);\n        this.roomLight.diffuse = new BABYLON.Color3(1, .945, .878);\n        this.roomLight.intensity = 0.5;\n\n        this.update(this.size);\n    }\n\n    createRoom(options, scene) {\n        // Let's try our built-in 'box' shape. Params: name, size, scene, updatable, sideOrientation\n        const room = BABYLON.MeshBuilder.CreateBox(\n            \"room\",\n            {\n                width: options.width,\n                height: options.height,\n                depth: options.depth,\n                sideOrientation: BABYLON.Mesh.BACKSIDE\n            },\n            scene\n        );\n\n        const verticesCount = room.getTotalVertices();\n\n        room.isPickable = false;\n        room.checkCollisions = true;\n        room.subMeshes=[];\n\n        room.subMeshes.push(new BABYLON.SubMesh(1, 0, verticesCount, 0, 30, room));\n        room.subMeshes.push(new BABYLON.SubMesh(0, 5, verticesCount, 30, 6, room));\n\n        const roomMaterial = new BABYLON.MultiMaterial('roomMaterial', scene);\n        const floorMaterial = new BABYLON.StandardMaterial(\"floorMaterial\", scene);\n        floorMaterial.specularPower = 10;\n        floorMaterial.diffuseTexture = new BABYLON.Texture('./lib/floor.jpg', scene);\n        floorMaterial.diffuseTexture.uScale = 4;\n        floorMaterial.diffuseTexture.vScale = 4;\n\n        const wallMaterial = new BABYLON.StandardMaterial(\"wallMaterial\", scene);\n        wallMaterial.specularPower = 10;\n\n        roomMaterial.subMaterials.push(floorMaterial);\n        roomMaterial.subMaterials.push(wallMaterial);\n\n        room.material = roomMaterial;\n\n        return room;\n    }\n\n    remove() {\n        this.roomLight.dispose();\n        return this.room.dispose();\n    }\n\n    update(size) {\n        const adjustGroundHeight = 0.001;\n\n        if (this.room) {\n            this.room.dispose();\n        }\n\n        this.size = Object.assign(this.size, size);\n        this.room = this.createRoom(this.size, this.scene);\n\n        // Move the room upward 1/2 its height\n        this.room.position.y = (this.size.height / 2) + adjustGroundHeight;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/room.js\n// module id = 1\n// module chunks = 0","// This begins the creation of a function that we will 'call' just after it's built\nexport function createScene(canvas, engine) {\n    // Now create a basic Babylon Scene object \n    const scene = new BABYLON.Scene(engine);\n    // Enable Collisions\n    scene.collisionsEnabled = true;\n    scene.gravity = new BABYLON.Vector3(0, -0.9, 0);\n\n    const backgroundColor = new BABYLON.Color3(.95, .95, .95);\n    // Change the scene background color to green.\n    scene.clearColor = backgroundColor;\n\n    // This creates and positions a free camera\n    const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\n    // This targets the camera to scene origin\n    camera.setTarget(BABYLON.Vector3.Zero());\n    // This attaches the camera to the canvas\n    camera.attachControl(canvas, false);\n\n    // This creates a light, aiming 0,1,0 - to the sky.\n    const skyLight = new BABYLON.HemisphericLight(\"skyLight\", new BABYLON.Vector3(0, 1, 0), scene);\n\n    // Dim the light a small amount\n    skyLight.intensity = .5;\n\n    // Create grid ground material\n    const gridMaterial = new BABYLON.GridMaterial(\"gridMaterial\", scene);\n    gridMaterial.gridRatio = 0.1;\n    gridMaterial.mainColor = new BABYLON.Color3(.8, .8, .8);\n    gridMaterial.lineColor = new BABYLON.Color3(.8, .8, .8);\n    gridMaterial.opacity = .99;\n\n    // Let's try our built-in 'ground' shape.  Params: name, width, depth, subdivisions, scene\n    const ground = BABYLON.Mesh.CreateGround(\"worldGrid\", 25, 25, 0, scene);\n    ground.material = gridMaterial;\n    ground.isPickable = false;\n\n    scene.fogMode = BABYLON.Scene.FOGMODE_EXP;\n    scene.fogColor = backgroundColor;\n\n    // Enable moving of elements\n    var startingPoint;\n    var currentMesh;\n\n    var getGroundPosition = function () {\n        // Use a predicate to get position on the ground\n        var pickinfo = scene.pick(scene.pointerX, scene.pointerY, function (mesh) { return mesh == ground; });\n        if (pickinfo.hit) {\n            return pickinfo.pickedPoint;\n        }\n\n        return null;\n    }\n\n    var onPointerDown = function (evt) {\n        if (evt.button !== 0) {\n            return;\n        }\n\n        // check if we are under a mesh\n        var pickInfo = scene.pick(scene.pointerX, scene.pointerY);\n\n        if (pickInfo.hit) {\n            currentMesh = pickInfo.pickedMesh;\n\n            //currentMesh.enableEdgesRendering(.9999);\n            currentMesh.edgesWidth = 3;\n            currentMesh.edgesColor = new BABYLON.Color4(0, 0, 1, 1);\n\n            startingPoint = getGroundPosition(evt);\n\n            if (startingPoint) { // we need to disconnect camera from canvas\n                setTimeout(function () {\n                    camera.detachControl(canvas);\n                }, 0);\n            }\n        }\n    }\n\n    var onPointerUp = function () {\n        if (startingPoint) {\n            camera.attachControl(canvas, true);\n            startingPoint = null;\n            //currentMesh.disableEdgesRendering();\n            currentMesh = null;\n            return;\n        }\n    }\n\n    var onPointerMove = function (evt) {\n        if (!startingPoint) {\n            return;\n        }\n\n        var current = getGroundPosition(evt);\n\n        if (!current) {\n            return;\n        }\n\n        var diff = current.subtract(startingPoint);\n        currentMesh.moveWithCollisions(diff);\n\n        startingPoint = current;\n\n    }\n\n    canvas.addEventListener(\"pointerdown\", onPointerDown, false);\n    canvas.addEventListener(\"pointerup\", onPointerUp, false);\n    canvas.addEventListener(\"pointermove\", onPointerMove, false);\n\n    scene.onDispose = function () {\n        canvas.removeEventListener(\"pointerdown\", onPointerDown);\n        canvas.removeEventListener(\"pointerup\", onPointerUp);\n        canvas.removeEventListener(\"pointermove\", onPointerMove);\n    }\n\n    return scene;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/scene.js\n// module id = 2\n// module chunks = 0","module.exports = BABYLON;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"BABYLON\"\n// module id = 3\n// module chunks = 0","import BABYLON from 'babylonjs';\nimport { createScene } from './scene.js';\nimport { Room } from './room.js';\nimport { importMesh } from './importMesh.js'\n\n// Get the canvas element from our HTML above\nconst canvas = document.getElementById(\"renderCanvas\");\n// Load the BABYLON 3D engine\nconst engine = new BABYLON.Engine(canvas, true);\n// Now, call the createScene function that you just finished creating\nconst scene = createScene(canvas, engine);\n\nfunction roomComplete(room) {\n    // Shadow\n    const shadowGenerator = new BABYLON.ShadowGenerator(1024, room.roomLight);\n    shadowGenerator.useBlurVarianceShadowMap = true;\n    shadowGenerator.blurScale = 2;\n    // shadowGenerator.bias = 0.005;\n    // shadowGenerator.usePoissonSampling = true;\n\n    const paxConfig = {\n        path: '/lib/',\n        fileName: 'pax.babylon',\n        position: {\n            x: 2,\n            z: 2\n        },\n        shadowGenerator: shadowGenerator\n    };\n\n    const strandmonConfig = {\n        path: '/lib/',\n        fileName: 'strandmon.babylon',\n        position: {\n            x: -2,\n            y: .5,\n            z: -2\n        },\n        shadowGenerator: shadowGenerator\n    };\n\n    importMesh('model', scene, paxConfig);\n    importMesh('strandmon', scene, strandmonConfig);\n}\n\n// Register a render loop to repeatedly render the scene\nengine.runRenderLoop(function () {\n    scene.render();\n});\n\n// Watch for browser/canvas resize events\nwindow.addEventListener(\"resize\", () => {\n    engine.resize();\n});\n\nlet room = undefined;\n\nwindow.addEventListener(\"submit\", (e) => {\n    e.preventDefault();\n\n    const target = e.target;\n    const data = new FormData(target);\n\n    const roomSize = {\n        width: data.get('x') || 2,\n        height: data.get('y') || 2.6,\n        depth: data.get('z') || 2\n    };\n\n    if (room) {\n        room.update(roomSize);\n    } else {\n        room = new Room(roomSize, scene);\n    }\n\n    room.room.receiveShadows = true;\n\n    roomComplete(room);\n});\n\nconsole.log(scene);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scripts/app.js\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}